/* CSS Grid */
/* CSS Grid는 예전부터 핵(Hack)으로 불린 다양한 레이아웃 대체 방식들을 해결하기 위해 만들어진 특별한 CSS 모듈 */

/* Grid Properties */
/* CSS Grid는 CSS Flex와 같이 Container(컨테이너)와 Item(아이템)이라는 두 가지 개념으로 구분 */

/* Grid Container Properties */
/* 
    속성	                        의미
    display	                        그리드 컨테이너(Container)를 정의
    grid-template-rows	            명시적 행(Track)의 크기를 정의
    grid-template-columns	        명시적 열(Track)의 크기를 정의
    grid-template-areas	            영역(Area) 이름을 참조해 템플릿 생성
    grid-template	                grid-template-xxx의 단축 속성
    row-gap(grid-row-gap)	        행과 행 사이의 간격(Line)을 정의
    column-gap(grid-column-gap)	    열과 열 사이의 간격(Line)을 정의
    gap(grid-gap)	                xxx-gap의 단축 속성
    grid-auto-rows	                암시적인 행(Track)의 크기를 정의
    grid-auto-columns	            암시적인 열(Track)의 크기를 정의
    grid-auto-flow	                자동 배치 알고리즘 방식을 정의
    grid	                        grid-template-xxx과 grid-auto-xxx의 단축 속성
    align-content	                그리드 콘텐츠(Grid Contents)를 수직(열 축) 정렬
    justify-content	                그리드 콘텐츠를 수평(행 축) 정렬
    place-content	                align-content와 justify-content의 단축 속성
    align-items	                    그리드 아이템(Items)들을 수직(열 축) 정렬
    justify-items	                그리드 아이템들을 수평(행 축) 정렬
    place-items	                    align-items와 justify-items의 단축 속성
*/

/* display */
/* Grid Container(컨테이너)를 정의.
    정의된 컨테이너의 자식 요소들은 자동으로 Grid Items(아이템)로 정의. 
*/
/* 
    값	            의미
    grid	        Block 특성의 Grid Container를 정의
    inline-grid	    Inline 특성의 Grid Container를 정의 
*/
.container {
    display: grid;
    width: 300px;
    height: 250px;
    border: 4px solid lightgray;
}

.item {
    border: 2px dashed red;
}


/* grid-template-rows */
/* 명시적 행(Track)의 크기를 정의 */
/* grid-template-columns */
/* 명시적 열(Track)의 크기를 정의 */
.container-grid-rows {
    width: 600px;
    display: grid;
    grid-template-rows: repeat(4, 100px);
    grid-template-columns: repeat(3, 1fr);
    border: 4px solid lightgray;
}

.item-grid-rows {
    border: 10px solid red;
    font-size: 30px;
}

/* grid-row */
/* grid-row-start과 grid-row-end의 단축 속성 */

/* grid-column */
/* grid-column-start과 grid-column-end의 단축 속성 */
.item-grid-rows:nth-child(1) {
    grid-row: 1/3;
    grid-column: 1/3;
}

.item-grid-rows:nth-child(2) {
    grid-row: 1/3;
}

.item-grid-rows:nth-child(4) {
    grid-row: 4/5;
    grid-column: -1/-3;
}

/* grid-template-areas */
/* 지정된 그리드 영역 이름(grid-area)을 참조해 그리드 템플릿을 생성 */
.container-grid-template-areas {
    display: grid;
    grid-template-rows: repeat(3, 100px);
    grid-template-columns: repeat(3, 1fr);
    grid-template-areas:
        "header header header"
        "main main aside"
        "footer footer footer";
    gap: 30px 15px;
}


.item-grid-template-areas {
    border: 10px solid red;
}

.item-grid-template-areas:nth-child(1) {
    grid-area: header;
}

.item-grid-template-areas:nth-child(2) {
    grid-area: main;
}

.item-grid-template-areas:nth-child(3) {
    grid-area: aside;
}

.item-grid-template-areas:nth-child(4) {
    grid-area: footer;
}


/* row-gap */
/* 각 행과 행 사이의 간격(Gutter)을 지정 */
/* 더 명확하게는 그리드 선(Grid Line)의 크기를 지정 */

/* column-gap */
/* 각 열과 열 사이의 간격(Gutter)을 지정 */

/* grid-auto-rows */
/* 암시적 행(Track)의 크기를 정의 */
/*  */

/* grid-auto-columns */
/* 암시적 열(Track)의 크기를 정의 */

.container-grid-auto {
    width: 600px;
    display: grid;
    grid-template-rows: repeat(2, 100px);
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 100px;
    grid-auto-columns: 1fr;
}

.item-grid-auto {
    border: 10px solid red;
}

.item-grid-auto:nth-child(1) {
    grid-column: 1 / 3;
}

.item-grid-auto:nth-child(2) {
    grid-column: 3 / 5;
}

.item-grid-auto:nth-child(3) {
    grid-column: span 2;
}

.item-grid-auto:nth-child(4) {
    grid-row: 5 / 7;
    grid-column: 6/ 7;
}


/* grid-auto-flow */
/* 배치하지 않은 아이템(Item)을 어떤 방식의 ‘자동 배치 알고리즘’으로 처리할지 정의 */
/* 
    값                      의미                                            기본값 
    row                     각 행 축을 따라 차례로 배치                       row 
    column                  각 열 축을 따라 차례로 배치 
    row dense(dense)        각 행 축을 따라 차례로 배치, 빈 영역 메움 ! 
    column dense            각 열 축을 따라 차례로 배치, 빈 영역 메움 !
*/
.container-grid-auto-flow {
    width: 600px;
    display: grid;
    grid-template-rows: repeat(3, 100px);
    grid-template-columns: repeat(3, 1fr);
    grid-auto-flow: dense;
}


.item-grid-auto-flow {
    border: 10px solid red;
}

.item-grid-auto-flow:nth-child(1) {
    grid-column: span 2;
}

.item-grid-auto-flow:nth-child(2) {
    grid-column: -1 / -3;
}


/* grid template */
.container-grid-template {
    display: grid;
    grid-template:
        "header header header" 80px
        "main . aside" 350px
        "footer footer footer" 130px
        / 2fr 100px 1fr;
}

.container-grid-template>* {
    border: 10px solid red;
}

header {
    grid-area: header;
}

main {
    grid-area: main;
}

aside {
    grid-area: aside;
}

footer {
    grid-area: footer;
}

/* grid */
/* grid-template-xxx과 grid-auto-xxx의 단축 속성 */

/* align-content */
/* 그리드 콘텐츠(Contents)를 수평(행 축) 정렬 */
/* 
    값              의미                                                  기본값 
    normal          stretch와 같습니다.                                   normal 
    start           시작점(위쪽) 정렬 
    center          수직 가운데 정렬 
    end             끝점(아래쪽) 정렬 
    space-around    각 행 위아래에 여백을 고르게 정렬 
    space-between   첫 행은 시작점에, 
                    끝 행은 끝점에 정렬되고 나머지 여백으로 고르게 정렬 
    space-evenly    모든 여백을 고르게 정렬 
    stretch         행 축을 채우기 위해 그리드 콘텐츠를 늘림
*/


/* justify-content */
/* 그리드 콘텐츠(Contents)를 수평(행 축) 정렬 */
/* 
    값              의미                                                  기본값 
    normal          stretch와 같습니다.                                   normal 
    start           시작점(위쪽) 정렬 
    center          수평 가운데 정렬 
    end             끝점(아래쪽) 정렬 
    space-around    각 열 위아래에 여백을 고르게 정렬 
    space-between   첫 열은 시작점에, 
                    끝 열은 끝점에 정렬되고 나머지 여백으로 고르게 정렬 
    space-evenly    모든 여백을 고르게 정렬 
    stretch         열 축을 채우기 위해 그리드 콘텐츠를 늘림
*/

/* align-items */
/* 그리드 아이템(Items)들을 수직(열 축) 정렬 */
/* 
    값          의미                                    기본값 
    normal      stretch와 같습니다.                     normal 
    start       시작점(위쪽) 정렬 
    center      수직 가운데 정렬 
    end         끝점(아래쪽) 정렬 
    stretch     열 축을 채우기 위해 그리드 아이템을 늘림
*/

/* align-self */
/* 단일 그리드 아이템(Item)을 수직(열 축) 정렬 */
/* 
    값          의미                                        기본값 
    normal      stretch와 같습니다.                         normal 
    start       시작점(위쪽) 정렬 
    center      수직 가운데 정렬 
    end         끝점(아래쪽) 정렬 
    stretch     열 축을 채우기 위해 그리드 아이템을 늘림
*/

/* justify-self */
/* 단일 그리드 아이템(Item)을 수평(행 축) 정렬 */
/* 
    값          의미                                        기본값 
    normal      stretch와 같습니다.                         normal 
    start       시작점(왼쪽) 정렬 
    center      수평 가운데 정렬 
    end         끝점(오른쪽) 정렬 
    stretch     행 축을 채우기 위해 그리드 아이템을 늘림
*/

/* order */
/* 그리드 아이템이 자동 배치되는 순서를 변경 */
/* 숫자가 작을수록 앞서 배치 */

/* z-index */
/* z-index 속성을 이용해 아이템이 쌓이는 순서를 변경 */


/* Grid Functions */
/* repeat */
/* repeat() 함수는 행/열(Track)의 크기 정의를 반복 */
/* ‘반복되는 횟수’와 ‘행/열의 크기 정의’를 인수로 사용합니다. */
/* grid-template-rows와 grid-template-columns에서 사용 */

/* minmax */
/* minmax() 함수는 행/열(Track)의 ‘최소/최대 크기’를 정의 */
/* 첫 번째 인수는 ‘최솟값’이고 두 번째 인수는 ‘최댓값’ */
/* grid-template-rows, grid-template-columns, grid-auto-rows 그리고 grid-auto-columns에서 사용 */
/* 일반 요소에 min-width와 max-width 속성을 동시 지정하는 것과 유사 */

/* fit-content */
/* fit-content() 함수는 행/열(Track)의 크기를 그리드 아이템(Item)이 포함하는 내용(Contents) 크기에 맞춤 */
.container-fit-content {
    border: 10px solid lightgray;
    display: grid;
    grid-template-rows: 100px 100px;
    grid-template-columns: fit-content(300px) fit-content(100%);
}

.item-fit-content {
    border: 10px solid red;
}


/* Grid Units */
/* fr */
/* fr(fractional unit)은 사용 가능한 공간에 대한 비율 */
.container-fr {
    border: 10px solid lightgray;
    display: grid;
    grid-template-columns: 2fr 1fr 100px 25%;
}
.item-fr {
    border: 10px solid red;
}


/* min-content */
/* 그리드 아이템이 포함하는 내용(Contents)의 최소 크기 */
/* max-content */
/* 그리드 아이템이 포함하는 내용(Contents)의 최대 크기 */
.container-minmax-content {
    border: 10px solid lightgray;
    display: grid;
    grid-template-columns: max-content 1fr;
}
.item-minmax-content {
    border: 10px solid red;
    font-size: 20px;
}


/* auto-fill, auto-fit */
/* 행/열(Track)의 개수를 그리드 컨테이너(Container) 및 행/열 크기에 맞게 자동으로(암시적) 조정 */
/* repeat() 함수와 같이 사용하며, 행/열과 아이템(Item) 개수가 명확할 필요가 없거나 명확하지 않은 경우 유용.(반응형 그리드) */
.container-auto-fill-fit {
    width: 500px;
    border: 10px solid lightgray;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    grid-auto-rows: 100px;
}
.item-auto-fill-fit {
    border: 10px solid red;
    font-size: 20px;
}

/* auto-fill과 auto-fit의 차이 */
/* auto-fill과 auto-fit은 차이점은 그리드 컨테이너가 하나의 행/열(Track)에 모든 아이템을 수용하고 남는 공간이 있을 때 발생 */
/* auto-fill은 남는 공간(빈 트랙)을 그대로 유지하고, auto-fit은 남는 공간을 축소 */